generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique 
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  posts         Post[]    @relation("UserPosts")
  comments      Comment[] @relation("UserComments")
  savedPosts    Post[]    @relation("SavedPosts")
  readPosts     Post[]    @relation("ReadPosts")
  preferredCategories Category[] @relation("UserPreferredCategories")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  settings Json?
  accounts      Account[]
  sessions      Session[]
  followers       User[]   @relation("UserFollows")
  following       User[]   @relation("UserFollows")
  notifications   Notification[]
  bookmarkedPosts Post[] @relation("BookmarkedPosts")
  notificationsReceived Notification[] @relation("NotificationRecipient")
  likedPosts Like[]
  spotifyAccessToken  String?
  spotifyRefreshToken String?
  spotifyTokenExpiry  DateTime?
}


model Notification {
  id          String   @id @default(cuid())
  type        String
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [id])
  recipientId String
  postId      String?
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  slug        String    @unique
  published   Boolean   @default(false)
  author      User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId    String
  comments    Comment[] @relation("PostComments")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  tags        Tag[]     @relation("PostTags")
  savedBy     User[]    @relation("SavedPosts")
  readBy      User[]    @relation("ReadPosts")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes Like[]
  publishedAt DateTime?
  bookmarkedBy User[]  @relation("BookmarkedPosts")
  views Int @default(0)
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Category {
  id        String @id @default(cuid())
  name      String @unique
  posts     Post[]
  preferredBy User[] @relation("UserPreferredCategories")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[] @relation("PostTags")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}